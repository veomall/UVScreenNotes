from PyQt5.QtWidgets import (QMainWindow, QWidget, QVBoxLayout, QApplication, 
                           QPushButton, QSlider, QLabel, QColorDialog, QHBoxLayout, QComboBox, QStackedWidget, QSpinBox)
from PyQt5.QtGui import QColor
from PyQt5.QtCore import Qt, QTimer, QSize  # Added QSize here
from drawing_modes import DrawingMode

class ControlWindow(QMainWindow):
    def __init__(self, canvas_window):
        super().__init__(None, Qt.WindowStaysOnTopHint | Qt.Tool | Qt.CustomizeWindowHint | Qt.WindowTitleHint)
        self.canvas_window = canvas_window
        self.setWindowTitle('Controls')
        
        central_widget = QWidget()
        layout = QHBoxLayout()
        
        # –õ–µ–≤–∞—è –≥—Ä—É–ø–ø–∞ (–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∏—Å–æ–≤–∞–Ω–∏—è)
        left_layout = QHBoxLayout()
        btn_size = QSize(30, 30)
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ –ª–µ–≤—É—é –≥—Ä—É–ø–ø—É
        self.toggle_btn = QPushButton('‚úèÔ∏è')
        self.toggle_btn.setToolTip('Toggle Drawing Mode')
        self.toggle_btn.clicked.connect(self.toggle_drawing)
        self.toggle_btn.setFixedSize(btn_size)
        left_layout.addWidget(self.toggle_btn)
        
        self.clear_btn = QPushButton('üóëÔ∏è')
        self.clear_btn.setToolTip('Clear Canvas')
        self.clear_btn.clicked.connect(self.clear_canvas)
        self.clear_btn.setFixedSize(btn_size)
        left_layout.addWidget(self.clear_btn)
        
        self.undo_btn = QPushButton('‚Ü©Ô∏è')
        self.undo_btn.setToolTip('Undo')
        self.undo_btn.clicked.connect(lambda: self.canvas_window.canvas.undo())
        self.undo_btn.setFixedSize(btn_size)
        left_layout.addWidget(self.undo_btn)
        
        self.redo_btn = QPushButton('‚Ü™Ô∏è')
        self.redo_btn.setToolTip('Redo')
        self.redo_btn.clicked.connect(lambda: self.canvas_window.canvas.redo())
        self.redo_btn.setFixedSize(btn_size)
        left_layout.addWidget(self.redo_btn)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–µ–∂–∏–º–æ–≤
        self.brush_btn = QPushButton('üñåÔ∏è')
        self.brush_btn.setToolTip('Brush Mode')
        self.brush_btn.setFixedSize(btn_size)
        self.brush_btn.setCheckable(True)
        self.brush_btn.setChecked(True)
        self.brush_btn.clicked.connect(lambda: self.switch_mode(DrawingMode.BRUSH))
        left_layout.addWidget(self.brush_btn)
        
        self.polygon_btn = QPushButton('üî∑')
        self.polygon_btn.setToolTip('Polygon Mode')
        self.polygon_btn.setFixedSize(btn_size)
        self.polygon_btn.setCheckable(True)
        self.polygon_btn.clicked.connect(lambda: self.switch_mode(DrawingMode.POLYGON))
        left_layout.addWidget(self.polygon_btn)
        
        self.lines_btn = QPushButton('‚ä¢')
        self.lines_btn.setToolTip('Lines Mode')
        self.lines_btn.setFixedSize(btn_size)
        self.lines_btn.setCheckable(True)
        self.lines_btn.clicked.connect(lambda: self.switch_mode(DrawingMode.LINES))
        left_layout.addWidget(self.lines_btn)
        
        self.notes_btn = QPushButton('üìù')
        self.notes_btn.setToolTip('Notes Mode')
        self.notes_btn.setFixedSize(btn_size)
        self.notes_btn.setCheckable(True)
        self.notes_btn.clicked.connect(lambda: self.switch_mode(DrawingMode.NOTES))
        left_layout.addWidget(self.notes_btn)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–∞–π–¥–µ—Ä—ã —Ä–µ–∂–∏–º–æ–≤
        self.sides_slider = QSlider(Qt.Horizontal)
        self.sides_slider.setFixedWidth(60)
        self.sides_slider.setMinimum(3)
        self.sides_slider.setMaximum(12)
        self.sides_slider.setValue(5)
        self.sides_slider.valueChanged.connect(lambda v: self.canvas_window.canvas.set_polygon_sides(v))
        self.sides_slider.hide()  # –°–∫—Ä—ã–≤–∞–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ
        left_layout.addWidget(self.sides_slider)
        
        self.line_direction_btn = QPushButton('‚ÜïÔ∏è')
        self.line_direction_btn.setToolTip('Toggle Line Direction')
        self.line_direction_btn.setFixedSize(btn_size)
        self.line_direction_btn.clicked.connect(self.toggle_line_direction)
        self.line_direction_btn.hide()
        left_layout.addWidget(self.line_direction_btn)
        
        self.line_spacing_slider = QSlider(Qt.Horizontal)
        self.line_spacing_slider.setFixedWidth(60)
        self.line_spacing_slider.setMinimum(0)
        self.line_spacing_slider.setMaximum(100)
        self.line_spacing_slider.setValue(0)
        self.line_spacing_slider.valueChanged.connect(
            lambda v: self.canvas_window.canvas.set_line_spacing(v))
        self.line_spacing_slider.hide()
        left_layout.addWidget(self.line_spacing_slider)
        
        layout.addLayout(left_layout)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—â–∏–π—Å—è —Å–ø–µ–π—Å–µ—Ä –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏
        layout.addStretch()
        
        # –ü—Ä–∞–≤–∞—è –≥—Ä—É–ø–ø–∞ (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–æ–º)
        right_layout = QHBoxLayout()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        self.width_slider = QSlider(Qt.Horizontal)
        self.width_slider.setFixedWidth(60)
        self.width_slider.setMinimum(1)
        self.width_slider.setMaximum(20)
        self.width_slider.setValue(5)
        self.width_slider.valueChanged.connect(self.change_line_width)
        right_layout.addWidget(self.width_slider)
        
        # –°–ª–∞–π–¥–µ—Ä –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
        self.opacity_slider = QSlider(Qt.Horizontal)
        self.opacity_slider.setFixedWidth(60)
        self.opacity_slider.setRange(1, 255)
        self.opacity_slider.setValue(255)
        self.opacity_slider.valueChanged.connect(lambda v: self.canvas_window.canvas.set_drawing_opacity(v))
        right_layout.addWidget(self.opacity_slider)
        
        self.color_btn = QPushButton()
        self.color_btn.setToolTip('Choose Color')
        self.color_btn.clicked.connect(self.choose_color)
        self.color_btn.setFixedSize(btn_size)
        self.current_color = QColor(Qt.black)
        self.update_color_button()
        right_layout.addWidget(self.color_btn)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–∫–Ω–æ–º
        small_btn_size = QSize(20, 20)
        
        self.minimize_btn = QPushButton('‚Äî')
        self.minimize_btn.setToolTip('Minimize')
        self.minimize_btn.clicked.connect(self.minimize_window)
        self.minimize_btn.setFixedSize(small_btn_size)
        right_layout.addWidget(self.minimize_btn)
        
        self.close_btn = QPushButton('√ó')
        self.close_btn.setToolTip('Close')
        self.close_btn.clicked.connect(QApplication.quit)
        self.close_btn.setFixedSize(small_btn_size)
        self.close_btn.setStyleSheet('QPushButton { color: red; }')
        right_layout.addWidget(self.close_btn)
        
        layout.addLayout(right_layout)
        
        central_widget.setLayout(layout)
        self.setCentralWidget(central_widget)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        self.setFixedSize(600, 50)
        screen = QApplication.primaryScreen().geometry()
        self.move(screen.width() - 620, 20)
        
        self.setWindowFlag(Qt.WindowStaysOnTopHint, True)
        self.raise_timer = QTimer(self)
        self.raise_timer.timeout.connect(self.ensure_on_top)
        self.raise_timer.start(100)

        # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏-–≤–µ—Ä—Å–∏—é –æ–∫–Ω–∞
        self.mini_window = MiniButton('üé®', self)
        self.mini_window.setFixedSize(30, 30)
        self.mini_window.clicked.connect(self.restore_window)
        self.mini_window.setWindowFlags(Qt.WindowStaysOnTopHint | Qt.Tool | Qt.FramelessWindowHint)
        self.mini_window.hide()

    def clear_canvas(self):
        self.canvas_window.canvas.clear_canvas()
    
    def toggle_drawing(self):
        self.canvas_window.toggle_click_through()
        self.toggle_btn.setText('üéÖ' if self.canvas_window.is_clickthrough else '‚úèÔ∏è')
    
    def change_line_width(self, value):
        self.canvas_window.canvas.pen_width = value
    
    def choose_color(self):
        color = QColorDialog.getColor(self.current_color, self)
        if color.isValid():
            self.current_color = color
            self.canvas_window.canvas.pen_color = color
            self.update_color_button()
    
    def update_color_button(self):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º value() –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —è—Ä–∫–æ—Å—Ç–∏ —Ü–≤–µ—Ç–∞
        brightness = (self.current_color.red() + self.current_color.green() + self.current_color.blue()) / 3
        self.color_btn.setStyleSheet(
            f'background-color: {self.current_color.name()}; color: {"white" if brightness < 128 else "black"};'
        )
    
    def ensure_on_top(self):
        self.raise_()
        self.activateWindow()
        
    def minimize_window(self):
        self.hide()
        self.mini_window.move(10, 10)  # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –≤ –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
        self.mini_window.show()
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–ª–∏–∫–æ–≤
        if not self.canvas_window.is_clickthrough:
            self.canvas_window.toggle_click_through()
            self.toggle_btn.setText('üéÖ')
        
    def restore_window(self):
        self.mini_window.hide()
        self.show()
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∂–∏–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        if self.canvas_window.is_clickthrough:
            self.canvas_window.toggle_click_through()
            self.toggle_btn.setText('‚úèÔ∏è')
    
    def toggle_visibility(self):
        if self.isVisible():
            self.minimize_window()
        elif self.mini_window.isVisible():
            self.restore_window()
        else:
            self.show()
            # –ü—Ä–∏ –ø–æ–∫–∞–∑–µ –æ–∫–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∂–∏–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è
            if self.canvas_window.is_clickthrough:
                self.canvas_window.toggle_click_through()
                self.toggle_btn.setText('‚úèÔ∏è')

    def toggle_line_direction(self):
        is_vertical = self.line_direction_btn.text() == '‚ÜïÔ∏è'
        self.line_direction_btn.setText('‚ÜîÔ∏è' if is_vertical else '‚ÜïÔ∏è')
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É: –ø–µ—Ä–µ–¥–∞–µ–º True –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π –∏ False –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö
        self.canvas_window.canvas.set_line_direction(not is_vertical)  # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ

    def switch_mode(self, mode):
        self.canvas_window.canvas.set_drawing_mode(mode)
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        self.brush_btn.setChecked(mode == DrawingMode.BRUSH)
        self.polygon_btn.setChecked(mode == DrawingMode.POLYGON)
        self.lines_btn.setChecked(mode == DrawingMode.LINES)
        self.notes_btn.setChecked(mode == DrawingMode.NOTES)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–æ–≤
        self.sides_slider.setVisible(mode == DrawingMode.POLYGON)
        self.line_direction_btn.setVisible(mode == DrawingMode.LINES)
        self.line_spacing_slider.setVisible(mode == DrawingMode.LINES)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        if mode == DrawingMode.POLYGON:
            self.setFixedSize(660, 50)
        elif mode == DrawingMode.LINES:
            self.setFixedSize(700, 50)
        else:
            self.setFixedSize(600, 50)

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –º–∏–Ω–∏-–∫–Ω–æ–ø–∫–∏
class MiniButton(QPushButton):
    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton:
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–µ–≤–æ–π –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏
            super().mousePressEvent(event)
            self.click()  # –≠–º—É–ª–∏—Ä—É–µ–º –∫–ª–∏–∫ –¥–ª—è –≤—ã–∑–æ–≤–∞ —Å–∏–≥–Ω–∞–ª–∞ clicked
